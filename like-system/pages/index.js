import Head from 'next/head'
import Image from 'next/image'
import styles from '@/styles/Home.module.css'
import axios from 'axios';
import { Box, Heading } from '@chakra-ui/react'
import { Link } from '@chakra-ui/react'
import { Divider } from '@chakra-ui/react'
import { Text } from '@chakra-ui/react'
import { Card, CardHeader, CardBody } from '@chakra-ui/react'
import { Stack } from '@chakra-ui/react'
import { Input } from '@chakra-ui/react'
import { IconButton } from '@chakra-ui/react'
import { CheckIcon } from '@chakra-ui/icons'
import { Offchain, SchemaEncoder } from "@ethereum-attestation-service/eas-sdk";
import { ethers } from "ethers"
import React, { useState } from "react";



export function getUnixTime(){
  const date = new Date() ;

  const a = date.getTime() ;

  const unixTime = Math.floor( a / 1000 ) ;

  return unixTime;
}

export async function createOffchainAttestation(){
  const EASContractAddress = "0xC2679fBD37d54388Ce493F1DB75320D236e1815e";
  const EAS_CONFIG = {
    address: EASContractAddress,
    version: "0.26", // 0.26
    chainId: "11155111",
  };


  const offchain = new Offchain(EAS_CONFIG);

  const schemaEncoder = new SchemaEncoder("bool like");
  const encodedData = schemaEncoder.encodeData([
    { name: "like", value: false, type: "bool" },
  ]);

  const provider = new ethers.providers.Web3Provider(window.ethereum);
  const signer = provider.getSigner();




  const offchainAttestation = await offchain.signOffchainAttestation({
    recipient: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045',
    // Unix timestamp of when attestation expires. (0 for no expiration)
    expirationTime: 0,
    // Unix timestamp of current time
    time: getUnixTime(),
    revocable: true,
    nonce: 0,
    schema: "0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd",
    refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',
    data: encodedData,
  }, signer);

  console.log(offchainAttestation);

}




export async function getServerSideProps(){
  try{
    const responce = await axios.post('https://easscan.org/graphql', {
      query: "query Query($where: AttestationWhereInput){attestations(where: $where){id\nrecipient\nschemaId\nattester}}",
      variables: `{"where": {"schemaId": {"equals": "0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd"}}}`
    })

    const r = await responce.data;
    const newArr = Object.values(r);
    
    const newDataArray = newArr[0];
    const newDataArray2 = Object.values(newDataArray);
    const newDataArray3 = newDataArray2[0];

    return {
      props: { newDataArray3 }
    }  
  } catch (error) {
    console.error(error);
    return {
      props: {
        newDataArray3: []
      }
    }
  }
};
  

  



export default function Home({newDataArray3}) {

  const [recipientAddress, setRecipientAddress] = useState("0x0000000000000000000000000000000000000000000000000000000000000064");

  function handleClick() {
    createOffchainAttestation();
  };
  
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Heading as='h2' size='2xl'>
        いいね一覧
      </Heading>
        
      <Link href={`https://easscan.org/schema/view/${newDataArray3[0].schemaId}`}>
          Schema Link 
      </Link>  
        

        
        
        <Divider />
        
        <Stack spacing={3}>
        
          <Input variant='filled' placeholder='Type the recipient wallet address' type= 'bytes32' value={recipientAddress} onChange={(e) => setRecipientAddress(e.target.value)}/>
          
        </Stack>

        <IconButton
          colorScheme='teal'
          aria-label='Call Segun'
          size='lg'
          icon={<CheckIcon />}
          onClick={handleClick}
        />
   
        <ul>
          <Card>
          <CardHeader>
            <Heading size='md'>ALL TX</Heading>
          </CardHeader>
            {newDataArray3.map((item) => (
              <li key={item.id}>
                
                  
                    <CardBody>
                      <Stack spacing='4'>
                        <Box>
                          <Text pt='2' fontSize='sm'>From {item.attester} &gt; To {item.recipient}</Text>
                        </Box>
                      </Stack>
                    </CardBody>
                  
                
              </li>
            ))}
          </Card>
        </ul>
        
        
    </>
  )
}
